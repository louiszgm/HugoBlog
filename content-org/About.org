#+hugo_base_dir: ../
#+hugo_section: ./
#+hugo_weight: 2001
#+hugo_auto_set_lastmod: t
#+hugo_draft: false
#+author:
#+hugo_custom_front_matter: :author "louiszgm"
* 关于
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_MENU: :menu "main"
:END:
Hi! I am louiszgm!
* 技能
** 基础技能
理解常用的各种“转换”（加密，编码，Hash）在实际运用中所发挥的作用。

** back-end
熟悉http，熟悉规范中常用的部分（各个HttpMethod的作用，各请求参数的类型，http状态码）

https， 熟悉https的证书校验和信息加密的过程。结合Nginx有实际配置https的经验。

golang, 基础知识，Go Gin web框架的使用

** DevOps
Jenkins，能够编写Pipeline脚本（Declarative Pipeline）。
Jenkins-Job-Builder，基础设施脚本话的一个工具。
持续集成，流程的拉通和统一。配置的脚本化，持续集成过程中团队规范检查工具，软件质量检查工具，代码质量检查工具等的开发和接入，消息通知的接入。
Docker, 会使用docker cli，docker-compose。

Linux基本操作。
** 个人项目
博客：louiszgm.xin
gitea： git.louiszgm.xin
Jenkins: ci.louiszgm.xin
使用docker搭建了个人的git平台（gitea），Jenkins，个人博客，Nginx。
使用Nginx作为前置的web服务器，并对各个server进行了https化。
个人博客模拟了持续集成的流程，从本地push代码之后通过Jenkins自动构建和发布。
各个服务都是通过docker容器进行部署，其中需要解决docker in docker以及容器网络之间互相访问等问题。
* 自我介绍

面试官你好，很高兴有这次的面试机会。我是邹贵明。下面我将介绍下我自己。本科毕业于2015年7月。有4年的软件开发经验。涉及的领域有……
最近两年就职于东莞市步步高教育电子有限公司（公司主要产品是家教机和小天才手表）在入职第一年中能很快适应公司文化氛围，全心投入工作，在年终总评中获得了优秀新人奖。


在工作中，我善于发现团队中不足的问题，结合自身快速学习的能力，能够提出解决方案并落地。
因为这样，组长也给予了我更多的工作机会。其中从事过Android应用开发，iOS应用开发，持续集成/部署相关的工作。

在工作之外，通过持续的学习不断的提升自己的：
1. 技术深度和广度
2. 跨界的思维能力


* 自我评价
勤于思考，通过不断发现团队的不足并提出相应的改善方案并进行落地。
具备快速学习的能力，在学习新事物的时，能够把握问题的本质。
热爱技术，automatic everything。
通过在工作之外自学了Docker和Jenkins，并进行了实际的运用。
热爱开源文化，自学了Emacs 以及 Org-mode，并使之成为了生产力工具。
可以无障碍的阅读英文资料，并翻译了(中文->英文)包建强老师的《Android插件化技术》一书中的两章。
* 应用工程
目的是为了提升软件的质量和开发效率
** Jenkins任务的配置脚本化（基础设施的脚本化）
S：Jenkins任务都需要人工的管理，每次新开发的工具想集成到任务中推动的成本过大。
T: 将团队现有的android app的持续集成抽象成通用的方案，并进行技术的选择和落地
A：
通过JenkinsJobBuilder进行Jenkins任务的管理，
通过Pipeline的任务类型，进行项目的持续集成。
通过Json Editor自定义Jenkins任务参数化构建视图的模版。
编写gradle插件，进行Android app软件质量的检测以及团队规范的检测。
编写Go 的web后台，对外暴露Jenkins任务管理和控制的能力。
Docker的使用

R：实现了Jenkins任务统一模版化的管理，减少人工配置Jenkins任务的工作。实现了持续集成平台的闭环，软件质量的checklist。

** IntelliJ 插件的开发
S：AndroidStudio是开发人员用的最多的工具，在这此平台上开发一个提高效率的工具
T：插件的开发
A：
通过阅读官方文档的插件开发指导和参考Ali P3C的IntelliJ IDEA插件来完成工作
R：帮助开发人员能够快速的通过一个集中化的地方去到最常用的平台，以及执行最常用的一些开发中需要用到的cli（比如Android的常用adb命令）
** 本地代码commit前的代码规范检测工具
S：项目代码中很多都不规范。
T：负责所需技术的选型和落地
A：
通过githook在提交前运行编写的python脚本从而调用到代码检测的gradle插件。
gradle插件采用的是二进制插件的形式，集成了checkstyle 和 AndroidLint等代码检测工具。
通过自定义AndroidLint规则来满足团队规范检测的需求。
自定义的gradle是托管到公司的私有maven仓库上
R：总计运行了5372次的检测，减少了一些代码上的低级错误
