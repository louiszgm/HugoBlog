#+hugo_base_dir: ../
#+hugo_section: ./post
#+hugo_weight: 2001
#+hugo_auto_set_lastmod: t
#+hugo_draft: false
#+author:
#+hugo_custom_front_matter: :author "louiszgm"

* Kotlin上手指南指导方向
:PROPERTIES:
:EXPORT_FILE_NAME: tryKotlin
:HUGO_CODE_FENCE: true
:END:
国际惯例，先上Hello World。
#+BEGIN_SRC Kotlin
package hello

fun main() {
    println("Hello World")
}
#+END_SRC
#+hugo: more

** 快速体验Kotlin
要想体验Kotlin，你不需要本地先安装环境。你只需要：
- 能上网
- 一个浏览器
通过官方文档，是一个能够最快速体验Kotlin的方式。你心里肯定想"这不是废话吗"。

别慌，请听我说完。Kotlin官方文档提供了一个 =可交互= 式的体验。

所谓的可交互式其实就是可以在网页上面直接运行Kotlin文档上提到的例子。

[[file:gifs/kotlin-helloworld.gif]]

*** 官方提供了哪些快速上手的渠道？
** Kotlin的好处以及坏处
使用Kotlin可以提高代码的简洁性，

- ~创建POJO~  在Kotlin中，创建一个POJO只需要一行代码。在Java中，需要写很多的比如 ~getters,setters,toString()~ 等方法
#+BEGIN_SRC Kotlin
data class Customer(val name: String, val email: String, val company: String)
#+END_SRC


- ~单例的创建~ 在Kotlin中，可以很简单的通过 ~object~  关键字就创建一个单例。在Java写过单例的同学们都知道，创建单例的方式有N种。
#+BEGIN_SRC Kotlin
object ThisIsASingleton {
    val companyName: String = "JetBrains"
}
#+END_SRC

- ~lambda表达式~ 在Kotlin中，天生就支持 ~lambda表达式~
#+BEGIN_SRC Kotlin
val positiveNumbers = list.filter { it > 0 }
#+END_SRC
** 在现有的项目中应该怎么引进
** 引进Kotlin过程中的疑惑
在只看官方文档的情况下，我相信大部分人都能够无障碍的使用起来。

但是，现实的情况是大部分的项目都已经的使用Java来写的。

*** Java 和 Kotlin交互有什么问题？
引用Kotlin官方文档中的一句话

#+BEGIN_QUOTE
Kotlin is designed with Java Interoperability in mind
#+END_QUOTE

所以，这里回答这一小节的问题。Java 和 Kotlin的交互式没有问题的。

- Kotlin调用Java
- Java调用Kotlin
**** Kotlin和Rxjava，Retrofit的交互
Rxjava 和 Retrofit ，这两个库基本上是Android应用开发者的必备库了。所以，在用kotlin的时候，估计这个点是被考虑的最多的。
**** 有哪些Java的东西在Kotlin中是 ‘没有’的
在Java中，有很多情况下我们需要传入一个

** 现在有哪些公司在用Kotlin了？

* Kotlin空安全以及对应的各种‘符号’的解释                                        :Kotlin:
:PROPERTIES:
:EXPORT_FILE_NAME: KotlinNullSafety
:HUGO_CODE_FENCE: true
:END:

#+BEGIN_QUOTE
Kotlin's type system is aimed at eliminating the danger of null references from code, also known as the [[https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare][The Billion Dollar Mistake.]]
#+END_QUOTE
[[file:imgs/billionDollarMistake.jpg]]
#+hugo: more

- Kotlin的空安全是什么？

可以大幅度的减少我们应用的 ~NullPointerException~ （文章后面会使用 ~NPE~ 来表示这个异常)

这个东西理解理解起来很简单，但是到了真正使用的时候。就会被他的各种符号给搞得糊涂了。例如下面的符号：

~?~ ~?.~ ~?:~ ~!!.~

** 决定变量是否可空（nullable） ? 的使用
我们从变量的声明开始去理解Kotlin帮我们做的这些空安全的操作。

在Kotlin中，声明一个变量默认是空安全的。

如果希望一个变量可以是 ~null~ 的，可以通过在变量声明的类型后面加入 ~?~ 。


[[file:imgs/KotlinNullSafety.png]]

** 决定nullable变量的行为 ?. ?: !! 的使用
接下来是对已声明的变量的使用。

当声明的一个变量是 ~nullable~ 的时候，为了让程序不抛出 ~NPE~ 。我们想想，我们会怎么做？

常用的做法就是对一个变量进行判空,下面这行代码。写Java的人都再熟悉不过了。
#+BEGIN_SRC java
if(b == null) return
int length = b.length()
#+END_SRC

Kotlin帮我们做的一件事就是把这个判空操作提前到编译期了，不过现在的IDE也会有实时的提示。

[[file:imgs/KotlinAccessNullableType.png]]

IDE的提示我们可以这么去理解，他让我们自行决定。 ~你的这句话到底需不需要抛出NPE~

- 如果不允许抛出，则应该做判空处理
#+BEGIN_SRC Kotlin
if (b == null) return
val x = b.length
#+END_SRC

在Kotlin中，我们可以使用一个叫 ~Safe Call， 符号是 ?.~ 的来达到上面的判空目的，下面的代码和上面基本等价的。
#+BEGIN_SRC Kotlin
val x = b?.length
#+END_SRC

上面为什么说是基本等价的呢？ 因为 ~?.~ 只在b不为 ~null~ 的情况下才会执行 ~b.length~ 并且返回。
如果b为 ~null~ 的并且只使用了 ~?.~ 的话，Kotlin默认会返回一个 ~null~ 。
但是，在实际的场景中，我们希望执行我们期望的行为。比如在上面，我们希望b为 ~null~ 的时候就直接 ~return~ 了。

在Kotlin中，提供了一个叫 ~Elvis Operator~ 的操作符可以让我们自行控制 ~nullable变量类型为null的时候的行为~ 。写法是 ~?:~
也就是说，要和上面的判空处理真正等价的是下面的代码。
#+BEGIN_SRC Kotlin
val x = b ?.length ?:return
#+END_SRC

- 如果允许抛出 ~NPE~ ，则需要自己显式的 ~throw 一个NPE~
#+BEGIN_SRC Kotlin
if (b == null) throw NullPointerException()
val x = b.length
#+END_SRC

在Kotlin中，我们可以使用 ~!!~ 来达到上面显式抛出 ~NPE~ 的目的，下面的代码和上面的是等价的。
#+BEGIN_SRC Kotlin
val x = b!!.length
#+END_SRC
我们也可以把 ~!!~ 拆分为如下：
#+BEGIN_SRC Kotlin
val x = b ?.length ?:throw NullPointerException()
#+END_SRC

** 总结
我们始终要关注当前使用的变量是否是nullable的。 ~?~ 的使用。

在nullable的情况下，我们要去决定是否需要抛出NPE。 ~?. 和 !!~ 的使用。

当变量为空的时候，我们是否需要执行自己的处理逻辑。 ~?:~ 的使用。
 
对于各种符号的困惑，下面提供了一个流程图可以帮助大家去理顺这个思路:
[[file:imgs/NullSafetyFlowChart.png]]
* 谈谈Kotlin中的SAM                                                             :Kotlin:
:PROPERTIES:
:EXPORT_FILE_NAME: KotlinSAM
:HUGO_CODE_FENCE: true
:END:

首先，先说明一下什么是 ~SAM~ 和 ~SAM Conversion~

- SAM,全称是Single Abstract Method。是一个 ~只有一个方法的接口~ 。

例如Android中的点击事件的监听器 ~OnClickListener~ 就是一个SAM
#+BEGIN_SRC Java
public interface OnClickListener {
    void onClick(View v);
}
#+END_SRC

- SAM Conversion, 指的是通过 ~某种形式~ ，转换为某个接口的具体实现。
#+hugo: more
[[*TL;DR][TL;DR]]

在Java8以上， SAM Conversion有如下几种：
- Lambda (Java8加入)
- Method Reference （Java8加入）
- Anonymous Implementation

#+BEGIN_SRC Java
public class JavaSamPractice extends Activity{

    private Button button;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //通过匿名实现的方式
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("Hello From Anonymous Implementation");
            }
        });
        //通过Lambda的语法
        button.setOnClickListener(view -> System.out.println("Hello From Lambda"));
        //通过Method Reference的语法
        button.setOnClickListener(this::clickSayHello);
    }

    private void clickSayHello(View view){
        System.out.println("Hello From Method Reference");
    }
}
#+END_SRC

在Kotlin中，方法的调用者为 ~Java对象~ 和 ~Kotlin对象~ 时，SAM Conversion分别如下所示:

当方法的调用者是 ~Java~ 对象时，SAM Conversion有如下几种：
- Lambda (Java8加入)
- Method Reference （Java8加入）
- Anonymous Implementation

这里的 ~button~ 就是Java对象
#+BEGIN_SRC Kotlin
class KotlinSamPractice : Activity() {
    lateinit var button: Button
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        //通过匿名实现的方式，在Kotlin中，用object 来声明一个匿名的接口实现
        button.setOnClickListener(object : View.OnClickListener {
            override fun onClick(v: View?) {
                println("Hello From Anonymous Implementation")
            }
        })
        //通过Lambda的语法
        button.setOnClickListener({ view -> println("Hello From Lambda") })

        //通过Method Reference的语法
        button.setOnClickListener(this::clickSayHello)
    }
    fun clickSayHello(view: View) {
        println("Hello From Method Reference")
    }
}
#+END_SRC
我们可以看到，这里的三种方式是和上面Java 的SAM Conversion是一样的。

当方法的调用者是 ~Kotlin~ 对象时，只有以下的一种SAM Conversion：
- Anonymous Implementation

这里的KotlinConsumer就是一个SAM
#+BEGIN_SRC Kotlin
interface KotlinConsumer<T> {
    fun accept(value: T)
}

class KotlinObservable<T> {
    fun subscribe(onNext: KotlinConsumer<T>) {}
}

class KotlinSamPractice {
    fun main(){
        //通过匿名实现的方式
        KotlinObservable<String>().subscribe(object :KotlinConsumer<String>{
            override fun accept(value: String) {
                println("Hello From Anonymous Implementation")
            }
        })
    }
}
#+END_SRC


下面是对KotlinObservable新增了一个类型是函数字面量的方法，这样子就可以使用Kotlin 的Lambda表达式了
#+BEGIN_SRC Kotlin
interface KotlinConsumer<T> {
    fun accept(value: T)
}

class KotlinObservable<T> {
    fun subscribe(onNext: KotlinConsumer<T>) {}
    fun subscribe(consumer: (value: T) -> Unit){}
}

class KotlinSamPractice {
    fun main(){
        //通过匿名实现的方式
        KotlinObservable<String>().subscribe(object :KotlinConsumer<String>{
            override fun accept(value: String) {
                println("Hello From Anonymous Implementation")
            }
        })

        //Lambda表达式
        KotlinObservable<String>().subscribe { value -> println("Hellow From Lambda") }
    }
}
#+END_SRC

** 真正的问题

在前面铺垫了这么多，我们来说一下这样子的话会有什么问题。

当一个Java的库需要转成Kotlin的时候，在Kotlin里可能是使用了以上3种SAM Conversion中的一种，

然而，除非在转换之后，一个参数类型为SAM的方法提供了另外一个参数类型为functional type的方法签名（如上所示）。
否则，通过Lambda 和 Method Reference的语法去使用都是不可以的。

** TL;DR
以上所说的可以总结为：
#+BEGIN_EXAMPLE
当Java的类库转换为Kotlin时，一些参数类型为SAM的接口。

需要再增加一个相同名称且参数为函数类型的接口。
#+END_EXAMPLE
* Kotlin-Lambda                                                                 :Kotlin:Lambdas:函数:高阶函数:
:PROPERTIES:
:EXPORT_FILE_NAME: KotlinLambdas
:HUGO_CODE_FENCE: true
:END:

** 前言
文中的案例可以在 [[https://play.kotlinlang.org][这个网站]] 进行练习

说起Lambda，我们就会联想起函数式编程，高阶函数，闭包这几个名词。那么今天，我们就来弄清楚Lambda是什么东西，和这几个东西到底是什么关系？

*** 高阶函数
具备以下两点的其中一点的函数，我们把它叫做 ~高阶函数~
- 将函数作为输入传给函数
- 让函数返回函数

~文章中，会围绕着下面这个类进行演示。~

新建一个叫Calculator的类。这个类的作用是，根据外部传入的 ~函数类型~ 的值。来动态的计算两个Int类型的值。并且返回结果

   里面有一个函数叫做calculate，返回一个Int类型的值，输入参数分别是：
   - 参数x，类型为Int
   - 参数y，类型为Int
   - 参数operator，类型为函数类型


#+BEGIN_SRC Kotlin
class Calculator{
    //calculate是一个高阶函数，因为他满足上面我们所说的高阶函数的条件之一: 函数作为输入参数传给了函数
    fun calculate(x: Int, y:Int, operator: (Int, Int)-> Int): Int{
        return operator(x,y)
    }

    //这里直接抛出异常，而没有用到 !! ?. 的相关操作法，是为了让对这方面不熟悉的同学看的清晰
    fun calculateWithNullableOperator(x: Int, y: Int,operator:((Int,Int)->Int)?):Int{
        if (operator == null){
            throw NullPointerException()
        }
        return operator(x,y)
    }
}
#+END_SRC

** 它是什么
首先，Lambda是一个表达式。使用这个表达式，我们可以用来表示一个函数。那换句话说，Lambda是服务于函数的。


什么是表达式？它有什么作用？我们平时在写代码的过程中肯定是用过很多的表达式，这里以String为例子:

我们是用什么符号去表示一个String类型的值的，没错，就是用的双引号  ~" "~ 。
- Lambda表达式是用来表示 ~函数类型~ 的值
- 双引号 ~" "~ 是用来表示 ~String类型~ 的值
我们这么一对比，就能够对Lambda是一个什么东西有了一个大概的了解

What? 函数类型又是什么? 我们先来说一下这个东西

#+hugo: more

*** 函数类型
我们先来做个类比。

字符串的叫做字符串类型，用 ~String~ 表示

函数的类型叫做函数类型，用什么表示呢？ 

有了类型，我们可以声明这个类型的变量，然后可以把这个变量到处传来传去。

而函数类型也是一样的。我们可以想象一下字符串类型可以做什么？相应的，函数类型也可以做到。

**** 函数类型是怎么表示的
我们声明一个字符串类型的变量的时候，是怎么声明的
#+BEGIN_SRC Kotlin
//其中的String就是字符串类型的表示形式
var text:String
#+END_SRC

而函数类型的表示形式，有如下的几种：
1. 用圆括号 ~()~ 将函数的输入参数包起来, 圆括号后面用右箭头 ~->~ ，右箭头后面接的是函数的返回值的类型。连起来就是像下面那样

#+BEGIN_EXAMPLE
(A,B)->C, A和B是函数输入参数的类型，C是函数返回值的类型

//当参数为空时，不能省略圆括号
() -> C
//当返回值C的类型是Unit的时候（对应Java的Void），不能省略
(A,B)->Unit
#+END_EXAMPLE

既然是类型，那当然可以使用 ~?~,来声明为nullable

输入参数中，也就是被圆括号括起来的，参数名字可以省略不写。但类型是必须要的

多个函数类型之间是可以互相嵌套的

**** 如何表示一个函数类型的值
表示一个String类型的值，如下：
#+BEGIN_SRC 
var text:String = "Instantiating a String type"
#+END_SRC

而一个函数类型的值，有哪几种方式呢？

我们声明一个函数类型的变量，分别用不同的方式去赋值。

***** 使用代码块的方式：
#+BEGIN_SRC Kotlin
    private fun initFunctionTypeByCodeBlock(calculator: Calculator) {
        //声明一个函数类型的变量
        var sumOperator: (num1: Int, num2: Int)->Int

        //通过Lambda expression初始化这个变量值
        sumOperator = {num1, num2 -> num1 + num2 }
        calculator.calculate(1,1,sumOperator)

        //通过匿名函数的方式初始化这个变量值
        sumOperator = fun(num1: Int, num2: Int):Int{return num1 + num2}
        calculator.calculate(2,2,sumOperator)
    }
#+END_SRC

***** 使用callable reference

***** 通过一个实现了函数类型的自定义类
#+BEGIN_SRC Kotlin
class SumOperator: (Int, Int)->Int{
    override fun invoke(p1: Int, p2: Int): Int {
        return p1 + p2
    }
}
#+END_SRC

#+BEGIN_SRC Kotlin
private fun initFunctionTypeByCustomClass(calculator: Calculator){
        var sumOperator: (num1: Int, num2: Int)->Int
        
        //通过实例化一个实现了对应函数类型的自定义类来赋值给函数类型的变量
        sumOperator = SumOperator()
        calculator.calculate(1,1,sumOperator)
    }
#+END_SRC

到这里，真正和Lambda相关的只有一个地方。那就是作为一个函数类型的值。


** 它解决了什么问题
Lambda表达式是用来表示 ~函数类型~ 的值
** 它怎么用
说到这里，我们来看下Lambda作为函数类型值的时候的用法

写法就是用一个大括号包裹着，如下就是一个Lambda expression：
#+BEGIN_SRC Kotlin
{x,y -> x+y}
#+END_SRC

*** 作为函数类型变量的值
这个在上面已经说过了,如下
#+BEGIN_SRC Kotlin
    //声明一个函数类型的变量
    var sumOperator: (num1: Int, num2: Int)->Int

    //通过Lambda expression初始化这个变量值
    sumOperator = {num1, num2 -> num1 + num2 }
#+END_SRC
*** 直接传递给高阶函数参数中的函数类型
说一下lambda表达式作为函数调用的最后一个参数时的三种写法，放到括号后面，省略括号和常规写法

#+BEGIN_SRC Kotlin
//常规传值，用 {} 包裹
calculator.calculate(1,1,{ x, y -> x+y })

//当函数类型的参数是最后一个的时候，可以将Lambda移到最外面
calculator.calculate(1,1) { x, y -> x+y }

//当函数的参数中只有一个函数类型的参数时，可以省略圆括号()
calculator.calculate { x, y -> x+y }
#+END_SRC
*** 高阶函数中的return
#+BEGIN_QUOTE
这一小节的例子来自Kotlin官方文档
#+END_QUOTE
在高阶函数中，直接使用return是退出整个函数
#+BEGIN_SRC Kotlin
fun foo() {
    listOf(1, 2, 3, 4, 5).forEach {
        if (it == 3) return // non-local return directly to the caller of foo()
        print(it)
    }
    println("this point is unreachable")
}

//输出结果是： 12
//我们可以看到最后面那一句 "this point is unreachable"并没有打印出来.
//可见这里return的是foo()这个函数
//要直接使用return的话，对应的高阶函数必须是用inline修饰的内联函数。这里的forEach就是
#+END_SRC

如果我们想要后面的那句话也打印出来的话，可以使用如下的做法
#+BEGIN_SRC Kotlin

fun foo() {
    listOf(1, 2, 3, 4, 5).forEach {
        if (it == 3) return@forEach // local return to the caller of the lambda, i.e. the forEach loop
        print(it)
    }
    print(" done with implicit label")
}

//输出结果是： 1245 done with implicit label
//我们使用了return@forEach的方式来返回lambda
#+END_SRC

我们也可以显示的指定label，如下，我们为forEach 贴个标签
#+BEGIN_SRC Kotlin
fun foo() {
    listOf(1, 2, 3, 4, 5).forEach lit@{
        if (it == 3) return@lit // local return to the caller of the lambda, i.e. the forEach loop
        print(it)
    }
    print(" done with explicit label")
}
//输出结果为： 1245 done with implicit label
//我们这里return的label 是我们自己显示指定的lit
#+END_SRC

虽然我们在forEach函数中return了，但剩下的4和5两个数字也打印出来了。如果我们希望forEach函数里面return
了之后就不继续往下执行了（类似于for循环里面的break），我们应该怎么做呢？如下：

#+BEGIN_SRC Kotlin
fun foo() {
    run loop@{
        listOf(1, 2, 3, 4, 5).forEach {
            if (it == 3) return@loop // non-local return from the lambda passed to run
            print(it)
        }
    }
    print(" done with nested loop")
}

//输出结果是：12 done with nested loop
//这里我们用run{}这个函数把我们的嵌套起来，然后我们return的是run{}这个高阶函数
#+END_SRC
** 它在开发过程中使用的案例是什么样的

** 它内部是怎么去做的
** 总结，附上源码地址
